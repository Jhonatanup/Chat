#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <Windows.h>
#include <process.h>
#include <time.h>

#pragma comment (lib, "Ws2_32.lib")

#define PORT "40000"
#define VER "1"
#define FILL_CHAR ' '
#define VERSION 1
#define COMMAND 5
#define ALL_LEN 22
#define MESSAGE 16

void criaConexao(void *arg);
void gerenciaConexao(void *arg);

using namespace std;

const string currentDateTime() {
	time_t     now = time(0);
	struct tm  tstruct;
	char       buf[80];
	tstruct = *localtime(&now);	
	strftime(buf, sizeof(buf), "%d-%m-%Y %X", &tstruct);

	return buf;
}

typedef struct parametros {
	SOCKET ListenSocket;
	SOCKET ClienteSocket;
}PARAM;

int main() {
	WSADATA wsaData;
	int iResult;
	PARAM par;
	HANDLE Thread;
	DWORD TName;

	//inicializando o Winsock indicando a versão do Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);//MAKEWORD(2,2) indica qual versão do Winsock está sendo utilizada
	if (iResult != 0) {
		printf("WSAStartup falhou. Erro %d\n", iResult);
		return 1;
	}

	//Criando o Winsock no servidor

	struct addrinfo hints;
	struct addrinfo *result = NULL;

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_INET; //especifica que o endereçamento IP é IPV4
	hints.ai_socktype = SOCK_STREAM; //especifica o socket stream
	hints.ai_protocol = IPPROTO_TCP; //especifica o protocolo da camada de transporte
	hints.ai_flags = AI_PASSIVE;

	//Define o endereço e a porta do servidor
	iResult = getaddrinfo(NULL, PORT, &hints, &result);
	if (iResult != 0) {
		printf("Gettaddrinfo falhou. Erro %d\n", iResult);
		WSACleanup();
		return 1;
	}


	//Cria o socket para ser usado no servidor
	SOCKET ListenSocket = INVALID_SOCKET;
	SOCKET ClienteSocket = INVALID_SOCKET;

	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
	if (ListenSocket == INVALID_SOCKET) {
		printf("Falha na criacao do socket. Erro: %ld\n", WSAGetLastError());
		freeaddrinfo(result);
		WSACleanup();
		return 1;
	}

	iResult = bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);
	if (iResult == SOCKET_ERROR) {
		printf("Bind falhou. Erro: %d\n", WSAGetLastError());
		freeaddrinfo(result);
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	par.ListenSocket = ListenSocket;

	freeaddrinfo(result);

	//Chama a funcao para ouvir passando como parametro o comprimento máximo da fila.
	Thread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)criaConexao, &par, 0, &TName);
	
	WaitForSingleObject(Thread,INFINITE);
	return 0;
}

void criaConexao(void *arg) {
	PARAM* par = (PARAM*)arg;

	int iResult;
	HANDLE Thread;
	DWORD TName;

	printf("Aguardando conexoes...\n\n");
	while (true) {
		iResult = listen(par->ListenSocket, SOMAXCONN);
		if (iResult == SOCKET_ERROR) {
			printf("Listen falhou. Erro: %d\n", WSAGetLastError());
			closesocket(par->ListenSocket);
			WSACleanup();
			system("PAUSE");
			break;
		}

		par->ClienteSocket = accept(par->ListenSocket, NULL, NULL);
		printf("\nConexao iniciada.\n");
		if (par->ClienteSocket == INVALID_SOCKET) {
			printf("Accept falhou. Erro %d\n", WSAGetLastError());
			closesocket(par->ListenSocket);
			WSACleanup();
			system("PAUSE");
			break;
		}
		Thread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)gerenciaConexao, &par->ClienteSocket, 0, &TName);
	}
}

void gerenciaConexao(void *arg) { 
	SOCKET *sock = (SOCKET*)arg; 
	SOCKET ClientSocket = *sock; 		
	
	string sendBuffer(ALL_LEN, FILL_CHAR); 
	string version(VERSION, FILL_CHAR); 
	string command(COMMAND, FILL_CHAR); 	
	string message(MESSAGE, FILL_CHAR); 
	string aux; 
	string recvBuffer;
	string recvVersion; 
	string recvCommand; 
	string recvMsglen; 
	string recvMessage; 
	char recvBuff[ALL_LEN] = {};
	char sendBuff[ALL_LEN] = {};
	
	int iResult = recv(ClientSocket, recvBuff, ALL_LEN, 0);	
	if (iResult <= 0) {
		printf("Receive falhou. Erro: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();
		system("PAUSE");
		_endthread();
	}
	
	recvBuffer = recvBuff;

	recvVersion = recvBuffer.substr(0,VERSION);	
	recvCommand = recvBuffer.substr(VERSION, COMMAND);
	recvMessage = recvBuffer.substr(VERSION + COMMAND, MESSAGE);
	printf("\nServidor - Versao recebida: %s", recvVersion.substr(0,VERSION).c_str()); 
	printf("\nServidor - Comando recebido: %s", recvCommand.substr(0,COMMAND).c_str());

	version.replace(0, VERSION, VER);
	command.replace(0, COMMAND, recvCommand);
			
	if (recvCommand.find("GET_H") != string::npos) {		
		message = currentDateTime().substr(11,9);
	}
	else if (recvCommand.find("GET_D") != string::npos){
		aux = currentDateTime();
		message = aux.substr(0,6);		
		message += aux.substr(8,2);		
	}
	else if(recvCommand.find("GET_A") != string::npos){	
		aux = currentDateTime();
		message = aux.substr(0,6);
		message += aux.substr(8,2);
		message += aux.substr(11,9);
	}
	else {
		message = "\nInvalido ";		
	}

	if (message.size() < MESSAGE) {
		for (int i = message.size(); i <= MESSAGE; i++)
			message += FILL_CHAR;
	}

	sendBuffer.replace(0, VERSION, version);
	sendBuffer.replace(VERSION, VERSION + COMMAND, command);
	sendBuffer.replace(VERSION + COMMAND, VERSION + COMMAND + MESSAGE, message);
		

	iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
	if (iResult == SOCKET_ERROR) {
		printf("Send falhou: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();	
		_endthread();
	}

	iResult = shutdown(ClientSocket, SD_SEND);
	if (iResult == SOCKET_ERROR) {
		printf("Shutdown falhou: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();
		_endthread();
	}
		
	closesocket(ClientSocket);	
	printf("\n\nConexao finalizada.");
}
