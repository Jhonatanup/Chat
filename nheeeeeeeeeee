#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <Windows.h>
#include <process.h>
#include <time.h>
#include <map>
#include <string>


#pragma comment (lib, "Ws2_32.lib")

#define PORT "45000"
#define VER "1"
#define VERSION 1
#define TYPE 3
#define FILL_CHAR ' '
#define FROM 20
#define TO  20
#define TAMANHO 5
#define ALL_LEN 20049
#define MESSAGE 20000

HANDLE mutex1;

//void criaConexao(void *arg);
void gerenciaConexao(void *arg);

using namespace std;

map<string, SOCKET> listaClientes;//map para relacionar nickname com SOCKET
map<string, int>contLiv;
map<string, int>::iterator ito;
map<string, SOCKET>::iterator it;

typedef struct parametros {
	SOCKET ListenSocket;
	SOCKET ClienteSocket;
}PARAM;

string getListaUsuarios() {

	string listaDeUsuarios;
	for (map<string, SOCKET>::iterator itu = listaClientes.begin(); itu != listaClientes.end(); ++itu) {
		listaDeUsuarios = listaDeUsuarios + itu->first + ";";
	}
	return listaDeUsuarios;
}

void UPDAll(string sendBuffer) {
	int iResult;
	string aux;
	for (map<string, SOCKET>::iterator itu = listaClientes.begin(); itu != listaClientes.end(); ++itu) {
		aux = itu->first;
		iResult = send(itu->second, sendBuffer.c_str(), ALL_LEN, 0);
		if (iResult == SOCKET_ERROR) {
			while (iResult == SOCKET_ERROR) {
				if (listaClientes.find(aux) != listaClientes.end())
					iResult = send(itu->second, sendBuffer.c_str(), ALL_LEN, 0);
				else
					break;
			}
		}
	}

}

void desconectaUsuario(string nickname) {
	closesocket(listaClientes[nickname]);

	it = listaClientes.find(nickname);
	if (it != listaClientes.end())
		listaClientes.erase(it);

	ito = contLiv.find(nickname);
	if (ito != contLiv.end())
		contLiv.erase(ito);
	
	printf("\nCliente desconectado: %s\n", nickname.c_str());
	string sendBuffer(ALL_LEN, FILL_CHAR);

	string version = "1";
	sendBuffer.replace(0, VERSION, version);
	string type = "UPD";
	sendBuffer.replace(VERSION, TYPE, type);
	string to(TO, FILL_CHAR);
	string from(FROM, FILL_CHAR);
	string tamanho(TAMANHO, FILL_CHAR);
	string message(MESSAGE, FILL_CHAR);
	message = getListaUsuarios();
	int aux = message.size();
	string tamanhoaux = to_string(aux);
	sendBuffer.replace(VERSION + TYPE + FROM + TO, aux, tamanhoaux);
	sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);
	
	UPDAll(sendBuffer);
	_endthread();
}

void liv() {
	char recvBuff[ALL_LEN] = {};
	string sendBuffer(ALL_LEN, FILL_CHAR);
	string recvBuffer(ALL_LEN, FILL_CHAR);
	string version = "1";
	sendBuffer.replace(0, VERSION, version);
	string type = "LIV";
	string recvType;
	sendBuffer.replace(VERSION, TYPE, type);
	string from(FROM, FILL_CHAR);
	string nickname(TO, FILL_CHAR);
	string tamanho(TAMANHO, FILL_CHAR);
	string message(MESSAGE, FILL_CHAR);
	string aux;
	int iResult;

	while (true) {
		WaitForSingleObject(mutex1, INFINITE);
		for (map<string, SOCKET>::iterator itu = listaClientes.begin(); itu != listaClientes.end(); ++itu) {
			aux = (itu->first).c_str();
			sendBuffer.replace(VERSION + TYPE + FROM, aux.size(), aux);
			iResult = send(itu->second, sendBuffer.c_str(), ALL_LEN, 0);
			iResult = recv(itu->second, recvBuff, ALL_LEN, 0);
			if (iResult <= 0) {
				//incrementa o contador;
				contLiv[itu->first]++;
			}
			else {
				recvBuffer = recvBuff;
				//recvVersion = recvBuffer.substr(0, VERSION);
				recvType = recvBuffer.substr(VERSION, TYPE);
				if (recvType == "ACK") {//Clliente respondeu
					contLiv[itu->first] = 0;
					continue;//vai para o proximo cliente
				}
				else
					contLiv[itu->first]++;;
			}
			if (contLiv[itu->first] >= 3) {//nao respondeu 3 vezes
					desconectaUsuario(itu->first);
					break;
			}
		}
		//espera 30 segundos
		ReleaseMutex(mutex1);
		Sleep(30000);			
	}
		
}




int main() {
	WSADATA wsaData;
	int iResult;
	PARAM par;
	HANDLE Thread[10], ThreadLiv;
	DWORD TName[10], TNameLiv;
	int live = 0;

	//inicializando o Winsock indicando a versão do Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);//MAKEWORD(2,2) indica qual versão do Winsock está sendo utilizada
	if (iResult != 0) {
		printf("WSAStartup falhou. Erro %d\n", iResult);
		return 1;
	}

	//Criando o Winsock no servidor

	struct addrinfo hints;
	struct addrinfo *result = NULL;

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_INET; //especifica que o endereçamento IP é IPV4
	hints.ai_socktype = SOCK_STREAM; //especifica o socket stream
	hints.ai_protocol = IPPROTO_TCP; //especifica o protocolo da camada de transporte
	hints.ai_flags = AI_PASSIVE;

	//Define o endereço e a porta do servidor
	iResult = getaddrinfo(NULL, PORT, &hints, &result);
	if (iResult != 0) {
		printf("Gettaddrinfo falhou. Erro %d\n", iResult);
		WSACleanup();
		return 1;
	}


	//Cria o socket para ser usado no servidor
	SOCKET ListenSocket = INVALID_SOCKET;
	SOCKET ClienteSocket = INVALID_SOCKET;

	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
	if (ListenSocket == INVALID_SOCKET) {
		printf("Falha na criacao do socket. Erro: %ld\n", WSAGetLastError());
		freeaddrinfo(result);
		WSACleanup();
		return 1;
	}

	iResult = bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);
	if (iResult == SOCKET_ERROR) {
		printf("Bind falhou. Erro: %d\n", WSAGetLastError());
		freeaddrinfo(result);
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	par.ListenSocket = ListenSocket;

	freeaddrinfo(result);

	//LISTEN
	int lResult;
	//HANDLE Thread;
	//DWORD TName;
	int i = 0;
	printf("Aguardando conexoes...\n\n");
	while (true) {
		lResult = listen(ListenSocket, SOMAXCONN);
		if (lResult == SOCKET_ERROR) {
			printf("Listen falhou. Erro: %d\n", WSAGetLastError());
			closesocket(ListenSocket);
			WSACleanup();
			//system("PAUSE");
			break;
		}

		ClienteSocket = accept(ListenSocket, NULL, NULL);
		printf("\nConexao iniciada.\n");

		if (ClienteSocket == INVALID_SOCKET) {
			printf("Accept falhou. Erro %d\n", WSAGetLastError());
			closesocket(ListenSocket);
			WSACleanup();
			//system("PAUSE");
			break;
		}
		else {
			Thread[i] = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)gerenciaConexao, &ClienteSocket, 0, &TName[i]);
			i++;
		}
		//CHAMA THREAD
		if(live == 0)
			ThreadLiv = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)liv, NULL, 0, &TNameLiv);
		live++;
	}

	return 0;
}

void gerenciaConexao(void *arg) {

	SOCKET *sock = (SOCKET*)arg;
	SOCKET ClientSocket = *sock;

	string sendBuffer(ALL_LEN, FILL_CHAR);
	string version(VERSION, FILL_CHAR);
	string type(TYPE, FILL_CHAR);
	string to(TO, FILL_CHAR);
	string from(FROM, FILL_CHAR);
	string tamanho(TAMANHO, FILL_CHAR);
	string message(MESSAGE, FILL_CHAR);
	string aux(ALL_LEN, FILL_CHAR);
	string recvBuffer;
	string recvVersion;
	string recvType;
	string recvTo;
	string recvFrom;
	string recvTamanho;//Msglen
	string recvMessage;
	char recvBuff[ALL_LEN] = {};
	char sendBuff[ALL_LEN] = {};


	int iResult = 0;
	
	while (iResult = recv(ClientSocket, recvBuff, ALL_LEN, 0)) {
		recvBuffer = recvBuff;
		recvType = recvBuffer.substr(VERSION, TYPE);
		/*
		if (iResult <= 0) {
			printf("Receive falhou. Erro: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			//system("PAUSE");
			_endthread();
		}
		*/
		if ((recvType == "REG" || recvType == "ERA" || recvType == "MEN")) {
		//recvBuffer = recvBuff;
		recvVersion = recvBuffer.substr(0, VERSION);
		recvType = recvBuffer.substr(VERSION, TYPE);
		recvFrom = recvBuffer.substr(VERSION + TYPE, FROM);
		recvTo = recvBuffer.substr(VERSION + TYPE + FROM, TO);
		recvTamanho = recvBuffer.substr(VERSION + TYPE + TO + FROM, TAMANHO);
		recvMessage = recvBuffer.substr(VERSION + TYPE + TO + FROM + TAMANHO, recvBuffer.length() - VERSION - TYPE - TO - FROM - TAMANHO);

		printf("\nServidor - Type recebida: %s", recvType.c_str());
		printf("\nServidor - Nickname recebido: %s", recvFrom.c_str());
		/*
		sendBuffer.replace(0, VERSION, version);
		sendBuffer.replace(VERSION, VERSION + COMMAND, command);
		sendBuffer.replace(VERSION + COMMAND, VERSION + COMMAND + MESSAGE, message);
		*/
		//REG
		if (recvType == "REG") {
			version = "1";
			sendBuffer.replace(0, VERSION, version);
			type = "ACK";
			sendBuffer.replace(VERSION, TYPE, type);
			//nickname já existe?
			WaitForSingleObject(mutex1, INFINITE);
			it = listaClientes.find(recvFrom);
			if (it == listaClientes.end()) {
				listaClientes[recvFrom] = ClientSocket; //insere nickname no map
				contLiv[recvFrom] = 0; //inicializa o map do contLiv
				//preenche o datagrama
				ReleaseMutex(mutex1);
				message = "TRUE";
				sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);

				iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
				if (iResult == SOCKET_ERROR) {
					while (iResult == SOCKET_ERROR) {
						//if (listaClientes.find(aux) != listaClientes.end())
						iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
						//else
						//	break;
					}
				}
				//manda um UDP
				type = "UPD";
				sendBuffer.replace(VERSION, TYPE, type);
				//pega todos os nicknames
				WaitForSingleObject(mutex1, INFINITE);
				message = getListaUsuarios();
				ReleaseMutex(mutex1);
				sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);
				WaitForSingleObject(mutex1, INFINITE);
				UPDAll(sendBuffer);
				ReleaseMutex(mutex1);
			}
			else {//nickname já existe
				message = "FALSE";
				sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);
				iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
				if (iResult == SOCKET_ERROR) {
					while (iResult == SOCKET_ERROR) {
						iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
					}
				}
			}
		}
		else if (recvType == "ERA") {
			version = "1";
			sendBuffer.replace(0, VERSION, version);
			type = "ACK";
			sendBuffer.replace(VERSION, TYPE, type);
			tamanho = "4";
			sendBuffer.replace(VERSION + TYPE + FROM + TO, tamanho.size(), tamanho);
			message = "TRUE";
			sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);
			iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
			if (iResult == SOCKET_ERROR) {
				while (iResult == SOCKET_ERROR)
					iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
			}
			//DESCONECTA O USUARIO
			WaitForSingleObject(mutex1, INFINITE);
			desconectaUsuario(recvFrom);
			ReleaseMutex(mutex1);
			WSACleanup();
			_endthread();
		}
		else if (recvType == "MEN") {
			version = "1";
			sendBuffer.replace(0, VERSION, version);
			type = "MEN";
			sendBuffer.replace(VERSION, TYPE, type);
			from = recvFrom;
			sendBuffer.replace(VERSION + TYPE, from.size(), from);
			to = recvTo;
			sendBuffer.replace(VERSION + TYPE + FROM, to.size(), to);
			tamanho = recvTamanho;
			sendBuffer.replace(VERSION + TYPE + FROM + TO, tamanho.size(), tamanho);
			message = recvMessage;
			sendBuffer.replace(VERSION + TYPE + FROM + TO + TAMANHO, message.size(), message);
			iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);
			if (iResult == SOCKET_ERROR) {
				while (iResult == SOCKET_ERROR)
					iResult = send(ClientSocket, sendBuffer.c_str(), ALL_LEN, 0);

			}
			printf("Troca de Mensagem entre %s e %s", from.c_str(), to.c_str());

		}
		sendBuffer = aux;
		}
		
	}
	printf("thread terminada com sucesso");
}


